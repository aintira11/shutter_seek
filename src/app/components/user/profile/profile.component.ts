import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

import { DataLike, DataMembers } from '../../../model/models';
import { CommonModule } from '@angular/common';
import { Constants } from '../../../config/constants';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms'
import { AuthService } from '../../../service/auth.service'; 
import {MatButtonModule} from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

@Component({
  selector: 'app-profile',
  standalone: true,
  imports: [CommonModule,FormsModule,MatButtonModule,MatIconModule],
  templateUrl: './profile.component.html',
  styleUrl: './profile.component.scss'
})
export class ProfileComponent implements OnInit{
  data: DataMembers[]=[];
  currentSlideIndex: number[] = [];
  Like :DataLike[]=[];
  Follow:[]=[];
 
    constructor(
    private router: Router,
    private Constants: Constants,
    private http: HttpClient,
    private authService: AuthService // inject AuthService
  ) {}
    ngOnInit(): void {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AuthService
    const user = this.authService.getUser();
    if (!user) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô AuthService");
      return;
    }

    this.data = [user];
    console.log("üîê ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", this.data);

    this.getMyLike(this.data[0].user_id);
    this.getFollow(this.data[0].user_id);
    this.Like.forEach((_, index) => {
      this.currentSlideIndex[index] = 0;
    });
  }

   // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏û‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ portfolio ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
getNext(portfolioIndex: number) {
  if (this.Like[portfolioIndex]?.image_urls?.length > 0) {
    const maxIndex = this.Like[portfolioIndex].image_urls.length - 1;
    // +1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞ mod ‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    this.currentSlideIndex[portfolioIndex] = ( (this.currentSlideIndex[portfolioIndex] || 0) + 1 ) % (maxIndex + 1);
    console.log(this.currentSlideIndex);
}
}
getPrev(portfolioIndex: number) {
 if (this.Like[portfolioIndex]?.image_urls?.length > 0) {
    const maxIndex = this.Like[portfolioIndex].image_urls.length - 1;
    // -1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢)
    this.currentSlideIndex[portfolioIndex] = ((this.currentSlideIndex[portfolioIndex] || 0) - 1 + (maxIndex + 1)) % (maxIndex + 1);
    console.log(this.currentSlideIndex);
  }
}

  goToEditPro(): void {
    this.router.navigate(['/edituser']);
    // this.router.navigate(['/edituser'],{ state: { data: this.data } });
  }
  goToShutter(): void {
    this.router.navigate(['/mainshutter']);
  }

  back(){
     this.router.navigate(['']);
    // this.router.navigate([''],{ state: { data: this.data } });
  }
  tofollow(){
     this.router.navigate(['/tofollow']);
    // this.router.navigate(['/tofollow'],{ state: { data: this.data } });
  }

  cancelEdit(){
    this.router.navigate(['/profile']);
    // this.router.navigate(['/profile'],{ state: { data: this.data } });
  }

getMyLike(id: number) {
  const url = `${this.Constants.API_ENDPOINT}/get/like/${id}`;
  this.http.get(url).subscribe((response: any) => {
    this.Like = response.map((item: any) => ({
      ...item,
      isLiked: true  // ‡πÄ‡∏û‡∏¥‡πà‡∏° isLiked = true
    }));
    console.log("‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏à :", this.Like);
  });
}

likeCancel(portfolioId: number | null) {
      const validPortfolioId = portfolioId ?? 0;
      if (validPortfolioId === 0) {
        console.error("Invalid portfolio_id!");
        return;
      }
    
      const userId = this.data?.[0]?.user_id ?? 0;
      if (userId === 0) {
        console.error("Invalid user_id!");
        return;
      }

        const url = `${this.Constants.API_ENDPOINT}/like/${validPortfolioId}/${userId}`;
        this.http.post(url, {}).subscribe({
          next: () => {
            console.log("Unlike success");
            // this.getMyLike(this.data.user_id);
          },
          error: (error) => console.error("Unlike error:", error)
        });
  
    }

    toShutter(id_shutter: number | null) {
      console.log("üì§ Sending id_shutter:", id_shutter);
      // console.log("üì§ Sending datauser:", this.datauser[0]);
    
      if (!id_shutter) {
        console.error(" Error: id_shutter is undefined or invalid");
        return;
      }
      
      this.router.navigate(['/preshutter'], { 
        state: { 
          // datauser: this.datauser[0], 
          idshutter: id_shutter 
        } 
      });
    }


 getFollow(id: number) {
    const url = `${this.Constants.API_ENDPOINT}/get/follow/${id}`;
    this.http.get(url).subscribe((res: any) => {
      this.Follow = res;
      console.log("üë• ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°:", this.Follow);
    });
  }
}
